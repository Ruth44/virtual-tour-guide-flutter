// Mocks generated by Mockito 5.3.2 from annotations
// in virtual_tour_guide_manager/test/data/bldg_detail/bldg_detail_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:virtual_tour_guide_manager/data/bldg_detail/model/bldg_detail.dart'
    as _i3;
import 'package:virtual_tour_guide_manager/data/building/data_provider/building_data_provider.dart'
    as _i2;
import 'package:virtual_tour_guide_manager/data/building/model/building.dart'
    as _i6;
import 'package:virtual_tour_guide_manager/data/building/repository/building_repository.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBuildingDataProvider_0 extends _i1.SmartFake
    implements _i2.BuildingDataProvider {
  _FakeBuildingDataProvider_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBldgDetail_1 extends _i1.SmartFake implements _i3.BldgDetail {
  _FakeBldgDetail_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BuildingRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildingRepository extends _i1.Mock
    implements _i4.BuildingRepository {
  MockBuildingRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BuildingDataProvider get buildingDataProvider => (super.noSuchMethod(
        Invocation.getter(#buildingDataProvider),
        returnValue: _FakeBuildingDataProvider_0(
          this,
          Invocation.getter(#buildingDataProvider),
        ),
      ) as _i2.BuildingDataProvider);
  @override
  _i5.Future<List<_i6.Building>> getAllBuildings() => (super.noSuchMethod(
        Invocation.method(
          #getAllBuildings,
          [],
        ),
        returnValue: _i5.Future<List<_i6.Building>>.value(<_i6.Building>[]),
      ) as _i5.Future<List<_i6.Building>>);
  @override
  _i5.Future<_i3.BldgDetail> getBuildingDetails(String? bldgId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBuildingDetails,
          [bldgId],
        ),
        returnValue: _i5.Future<_i3.BldgDetail>.value(_FakeBldgDetail_1(
          this,
          Invocation.method(
            #getBuildingDetails,
            [bldgId],
          ),
        )),
      ) as _i5.Future<_i3.BldgDetail>);
}
